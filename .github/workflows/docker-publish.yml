name: Docker

# 该工作流用于在推送匹配v*.*.*标签或手动触发时执行

on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  # 默认使用GitHub容器注册表
  REGISTRY: ghcr.io
  # 镜像名称为 <账号>/<仓库名>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v4

      # 安装cosign工具（仅在非PR时）
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # 设置Docker Buildx以构建多平台镜像并导出缓存
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # 登录GitHub容器注册表（仅在非PR时）
      - name: Log into GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取Docker镜像元数据（标签、标签）
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            标签: |
              type=ref,event=tag         # 使用Git标签作为镜像标签
              type=sha,label=short-sha    # 使用简短的commit SHA
              type=ref,event=branch,branch=main,tag=latest  # 仅在main分支构建latest标签


      # 使用Dockerfile构建并推送Docker镜像（非PR时推送）
      - name: Build 和 push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./Dockerfile  # 指定Dockerfile路径
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 对发布的Docker镜像进行签名（仅在非PR时）
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
